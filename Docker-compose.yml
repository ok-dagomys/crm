version: "3.8"

services:

  asterisk:
    build:
      context: .
      dockerfile: src/asterisk/Dockerfile
    container_name: asterisk
    environment:
      TZ: ${DOCKER_TZ}
    volumes:
      - ./src/asterisk:/app/src/asterisk
      - ./src/database:/app/src/database
      - ./src/service:/app/src/service
    depends_on:
      - mysql
    networks:
      - backend

  mysql:
    image: mysql:latest
    container_name: mysql
    volumes:
      - ./docker/mysql/data:/var/lib/mysql
    environment:
      TZ: ${DOCKER_TZ}
      MYSQL_ROOT_PASSWORD: ${SQL_PASSWORD}
    ports:
      - "6033:3306"
    networks:
      - backend

  phpmyadmin:
    image: phpmyadmin:latest
    container_name: pma
    environment:
      TZ: ${DOCKER_TZ}
      PMA_HOST: ${PMA_HOST}
      PMA_USER: ${SQL_USER}
      PMA_PASSWORD: ${SQL_PASSWORD}
    ports:
      - "8080:80"
    depends_on:
      - mysql
    networks:
      - backend
      - frontend

  api:
    build:
      context: .
      dockerfile: src/api/Dockerfile
    container_name: api
    environment:
      TZ: ${DOCKER_TZ}
    volumes:
      - ./src/api:/app/src/api
      - ./src/database:/app/src/database
      - ./src/service:/app/src/service
    depends_on:
      - phpmyadmin
    ports:
      - "8008:8000"
    networks:
      - backend
      - frontend

#  bot:
#    build:
#      context: .
#      dockerfile: src/bot/Dockerfile
#    container_name: bot
#    environment:
#      TZ: ${DOCKER_TZ}
#    volumes:
#      - ./src/bot:/app/src/bot
#      - ./src/database:/app/src/database
#      - ./src/service:/app/src/service
#    networks:
#      - backend

  jobs:
    build:
      context: .
      dockerfile: src/jobs/Dockerfile
    container_name: jobs
    environment:
      TZ: ${DOCKER_TZ}
    volumes:
      - storage:/mnt/storage
      - share:/mnt/share
      - ./src/jobs:/app/src/jobs
      - ./src/database:/app/src/database
      - ./src/service:/app/src/service
    depends_on:
      - asterisk
      - api
    networks:
      - backend

  test:
    build:
      context: .
      dockerfile: src/test/Dockerfile
    container_name: test
    environment:
      TZ: ${DOCKER_TZ}
    volumes:
      - storage:/mnt/storage
      - share:/mnt/share
      - ./src/test:/app/src/test
      - ./src/database:/app/src/database
      - ./src/service:/app/src/service
    networks:
      - backend
      - frontend

volumes:

  storage:
    driver: local
    driver_opts:
      type: cifs
      device: ${MOUNT_STORAGE}
      o: ${MOUNT_OPTIONS}

  share:
    driver: local
    driver_opts:
      type: cifs
      device: ${MOUNT_SHARE}
      o: ${MOUNT_OPTIONS}

networks:
  backend:
  frontend: